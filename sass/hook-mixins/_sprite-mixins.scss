/*
The provided mixins are intended to be used with variables directly

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/


@function doubleGet($master-map,$item-map,$item-prop ) {

  @return map-get( map-get( $master-map , $item-map) , $item-prop)
}

@mixin sprite-width($master-map,$item-map) {
  width: doubleGet($master-map , $item-map, 'width');
}

@mixin sprite-height($master-map,$item-map) {
  height: doubleGet($master-map , $item-map, 'height');
}

@mixin sprite-position($master-map,$item-map) {

  background-position: doubleGet($master-map , $item-map, 'offset-x') doubleGet($master-map , $item-map, 'offset-y');
}

@mixin sprite-image($master-map,$item-map) {


  // find map in map then get image param
  background-image: url(doubleGet($master-map , $item-map, 'image'));
}

@mixin sprite($master-map,$item-map) {
  @include sprite-image($master-map,$item-map);
  @include sprite-position($master-map,$item-map);
  @include sprite-width($master-map,$item-map);
  @include sprite-height($master-map,$item-map);
}


// retina extensions
@mixin sprite-width-retina($master-map,$item-map) {

  width: doubleGet($master-map , $item-map, 'width')/2;
}

@mixin sprite-height-retina($master-map,$item-map) {

  height: doubleGet($master-map , $item-map, 'height')/2;
}
@mixin sprite-scale-retina($master-map,$item-map) {


  background-size: doubleGet($master-map , $item-map, 'total-width')/2 doubleGet($master-map , $item-map, 'total-height')/2 ;
}



@mixin sprite-retina($master-map,$item-map) {
  @include sprite-image($master-map,$item-map);
  @include sprite-width-retina($master-map,$item-map);
  @include sprite-height-retina($master-map,$item-map);
  @include sprite-scale-retina($master-map,$item-map);
}
